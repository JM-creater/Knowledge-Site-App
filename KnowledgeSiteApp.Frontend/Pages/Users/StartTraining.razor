@page "/starttraining/{TrainingId:int}"
@inject HttpClient http
@inject IJSRuntime js
@inject NavigationManager navigate
@layout UserCategoriesLayout

<link rel="preconnect" href="https://fonts.googleapis.com" />
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" />
<link rel="stylesheet" type="text/css" href="css/gentrainings-stylesheet.css" />
<link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@300;400;500;600;700&display=swap" rel="stylesheet" />
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css" />
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.min.js"></script>

<style>
    * {
        scrollbar-width: auto;
        scrollbar-color: #862b0d transparent;
    }

    *::-webkit-scrollbar-track {
        background-color: transparent;
    }

    *::-webkit-scrollbar {
        width: 10px;
        background-color: transparent;
    }

    *::-webkit-scrollbar-thumb {
        background-color: #862b0d;
        border-radius: 10px;
    }
</style>

@if (selectedTraining != null && selectedTraining.Any())
{
    @foreach (Training tr in selectedTraining)
    {
        <div class="container-full-pg-1">
                <div class="description-container">
                    <h2 style="font-weight: 700; align-self: flex-start; justify-self: normal">
                        @tr.Title
                    </h2>
                    <div class="list-container">
                        @foreach (var topic in tr.Topics)
                        {
                            <ul>
                                <li>@topic.Title</li>
                                <ul>
                                    @foreach (var subTopic in topic.SubTopics)
                                    {
                                        <li>@subTopic.Title</li>
                                    }
                                </ul>
                            </ul>
                        }
                    </div>
                    <div style="
                        display: flex;
                        column-gap: 10px;
                        align-items: center;
                        margin-top: 1em;
                                  ">
                        <h6 style="font-weight: 700; margin: 0">Hosted by @tr.Admin.FirstName @tr.Admin.LastName</h6>
                        <img src=@($"https://localhost:7095/{tr.Admin.Image}")
                             style="
                                  max-width: 2em;
                                  max-height: 2em;
                                  object-fit: cover;
                                  aspect-ratio: 1/1;
                                  border-radius: 50%;
                                            " />
                    </div>
                </div>
        
            <div class="image-container">
                @if (!string.IsNullOrWhiteSpace(tr.Image))
                {
                    <img src=@($"https://localhost:7095/{tr.Image}")
                         style="width: 100%; height: 100%; object-fit: cover; border-radius: 0.5em;"
                         alt="Training Image" />
                }
                else
                {
                    <p>No image available</p>
                }
            </div>
            <div class="button-container">
                <button @onclick="() => NavigateToTopic(tr.Id)" class="btn btn-start" style="width: 100%">
                    <h6 style="color: white; font-weight: 600">Get Started</h6>
                    <i class="fa-solid fa-circle-right"
                       style="color: #febe3e; font-size: 30px"></i>
                </button>
            </div>
        </div>
    }
}

@code {
    [Parameter] public int TrainingId { get; set; }
    private Training[] selectedTraining { get; set; } = Array.Empty<Training>();

    private void NavigateToTopic(int trainingId)
    {
        if (selectedTraining != null && selectedTraining.Length > 0)
        {
            var firstTraining = selectedTraining[0];
            var firstTopicId = firstTraining.Topics.FirstOrDefault()?.TopicId ?? 0;
            navigate.NavigateTo($"/introtrainingsview/{trainingId}/{firstTopicId}");
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        var trainingByIdResponse = await SendAuthorizedRequest(HttpMethod.Get, $"https://localhost:7095/api/Training/{TrainingId}");

        if (trainingByIdResponse.IsSuccessStatusCode)
        {
            selectedTraining = new Training[] { await trainingByIdResponse.Content.ReadFromJsonAsync<Training>() };
        }
    }

    private async Task<HttpResponseMessage> SendAuthorizedRequest(HttpMethod method, string url, HttpContent content = null)
    {
        var request = new HttpRequestMessage(method, url);
        request.Headers.Add("X-API-KEY", "KNOWLEDGESITEAPPAPI");

        if (content != null)
        {
            request.Content = content;
        }

        return await http.SendAsync(request);
    }
}