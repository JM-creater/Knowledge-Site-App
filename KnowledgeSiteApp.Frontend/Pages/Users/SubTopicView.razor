@page "/subtopicview/{SubTopicId:int}"
@inject HttpClient http
@inject IJSRuntime js
@inject NavigationManager navigate
@layout UserCategoriesLayout

<link rel="preconnect" href="https://fonts.googleapis.com" />
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" />
<link rel="stylesheet" type="text/css" href="css/gentrainings-stylesheet.css" />
<link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@300;400;500;600;700&display=swap" rel="stylesheet" />
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css" />
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.min.js"></script>


<div class="container-fluid d-flex flex-column justify-content-center align-items-center">
    @if (selectedSubTopic != null)
    {
        <div>
            <h2 style="font-weight: 700; text-align: center">@selectedSubTopic.Title</h2>
        </div>
        <div class="video-container" style="width: 50%; margin: 1em auto">
            <div class="ratio ratio-16x9">
                <iframe style="max-width: 100%; height: 100%"
                        class="embed-responsive-item"
                        src=@selectedSubTopic.YouTubeUrl
                        allowfullscreen>
                </iframe>
            </div>
        </div>

        <div style="width: 90%">
            <h4 style="font-weight: 700; text-align: center; margin-bottom: 0.5em">
                Description
            </h4>
            <p style="text-align: center">@selectedSubTopic.Description</p>
        </div>

        <div class="footer-container">
            <button class="btn-arrow" @onclick="NavigateBack">
                <i class="fa-solid fa-circle-arrow-left"></i> 
            </button>

            <button class="btn-arrow" @onclick="NavigateForward">
                <i class="fa-solid fa-circle-arrow-right"></i> 
            </button>
        </div>
    }
    else
    {
        <p>Loading subtopic details...</p>
    }
</div>

@code {
    [Parameter] public int SubTopicId { get; set; }
    private int TrainingId { get; set; }
    private SubTopic selectedSubTopic { get; set; }
    private List<Training> trainings { get; set; } = new List<Training>();

    protected override async Task OnInitializedAsync()
    {
        await FetchSubTopicDetails(SubTopicId);
    }

    private async Task FetchSubTopicDetails(int subTopicId)
    {
        var response = await http.GetAsync($"https://localhost:7095/api/Training");

        if (response.IsSuccessStatusCode)
        {
            trainings = await response.Content.ReadFromJsonAsync<List<Training>>();

            var selectedSubTopicTraining = trainings.FirstOrDefault(t =>
                t.Topics.Any(topic =>
                    topic.SubTopics.Any(st => st.Id == subTopicId)));

            if (selectedSubTopicTraining != null)
            {
                TrainingId = selectedSubTopicTraining.Id;
                selectedSubTopic = selectedSubTopicTraining.Topics
                                   .SelectMany(tp => tp.SubTopics)
                                   .FirstOrDefault(st => st.Id == subTopicId);
                StateHasChanged();
            }
        }
    }

    private async Task NavigateForward()
    {
        var nextSubTopic = GetNextSubTopic(SubTopicId);
        if (nextSubTopic != null)
        {
            navigate.NavigateTo($"/subtopicview/{nextSubTopic.Id}");
            await FetchSubTopicDetails(nextSubTopic.Id);
            return;
        }

        var nextTopic = GetNextTopic(TrainingId, SubTopicId);
        if (nextTopic != null)
        {
            navigate.NavigateTo($"/introtrainingsview/{nextTopic.TopicId}");
            return;
        }

        navigate.NavigateTo($"/rating/{TrainingId}");
    }

    private Topic GetNextTopic(int currentTrainingId, int currentSubTopicId)
    {
        var currentTraining = trainings.FirstOrDefault(t => t.Id == currentTrainingId);
        if (currentTraining != null)
        {
            var topics = currentTraining.Topics.OrderBy(t => t.TopicId).ToList();
            var currentTopicIndex = topics.FindIndex(t => t.SubTopics.Any(st => st.Id == currentSubTopicId));
            if (currentTopicIndex != -1 && currentTopicIndex < topics.Count - 1)
            {
                return topics[currentTopicIndex + 1];
            }
        }
        return null;
    }

    private SubTopic GetNextSubTopic(int currentSubTopicId)
    {
        foreach (var training in trainings)
        {
            foreach (var topic in training.Topics)
            {
                var subTopicsList = topic.SubTopics.ToList();
                var subTopicIndex = subTopicsList.FindIndex(st => st.Id == currentSubTopicId);
                if (subTopicIndex != -1)
                {
                    if (subTopicIndex < subTopicsList.Count - 1)
                    {
                        return subTopicsList[subTopicIndex + 1];
                    }
                    else
                    {
                        break; 
                    }
                }
            }
        }
        return null;
    }

    private async Task NavigateBack()
    {
        await js.InvokeVoidAsync("history.back");
    }
}