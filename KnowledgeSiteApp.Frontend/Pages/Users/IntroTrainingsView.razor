@page "/introtrainingsview/{TopicId:int}"
@inject HttpClient http
@inject IJSRuntime js
@inject NavigationManager navigate
@layout UserMainLayout

<link rel="icon" type="image/x-icon" href="origami_bold_ico.ico" />
<link rel="preconnect" href="https://fonts.googleapis.com" />
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" />
<link rel="stylesheet" type="text/css" href="css/gentrainings-stylesheet.css" />
<link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@300;400;500;600;700&display=swap" rel="stylesheet" />
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css" />
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
@* <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.8/dist/umd/popper.min.js" crossorigin="anonymous"></script> *@
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.min.js"></script>


<div class="container-fluid d-flex flex-column justify-content-center align-items-center">
    @if (selectedTopic != null && selectedTopic.Any())
    {
        foreach (Topic tp in selectedTopic)
        {
            <div>
                <h2 style="font-weight: 700; text-align: center">
                    Introduction to @tp.Training.Title
                </h2>
            </div>

            <div class="video-container" style="width: 50%; margin: 1em auto">
                <div class="ratio ratio-16x9">
                    <iframe style="max-width: 100%; height: 100%"
                            class="embed-responsive-item"
                            src=@tp.YouTubeUrl
                            allowfullscreen>
                    </iframe>
                </div>
            </div>

            <div style="width: 90%">
                <h4 style="font-weight: 700; text-align: center; margin-bottom: 0.5em">
                    Description
                </h4>
                <p style="text-align: center">
                    @tp.Description
                </p>
            </div>
            <div class="footer-container">
                <button class="btn-arrow" @onclick="NavigateBack">
                    <i class="fa-solid fa-circle-arrow-left"></i>
                </button>

                @if (tp.SubTopics.Any())
                {
                    <button class="btn-arrow" @onclick="() => NavigateToFirstSubTopic(tp.SubTopics.FirstOrDefault().Id)">
                        <i class="fa-solid fa-circle-arrow-right"></i>
                    </button>
                }
                else
                {
                    <button class="btn-arrow" disabled>
                        <i class="fa-solid fa-circle-arrow-right"></i>
                    </button>
                }
            </div>
        }
    }
</div>

@code {
    [Parameter] public int TopicId { get; set; }
    private Topic[] selectedTopic{ get; set; } = Array.Empty<Topic>();

    private void NavigateToFirstSubTopic(int subTopicId)
    {
        navigate.NavigateTo($"/subtopicview/{subTopicId}");
    }

    private async Task NavigateBack()
    {
        await js.InvokeVoidAsync("history.back");
    }

    protected override async Task OnInitializedAsync()
    {
        var topicByIdResponse = await SendAuthorizedRequest(HttpMethod.Get, $"https://localhost:7095/api/Topic/{TopicId}");

        if (topicByIdResponse.IsSuccessStatusCode)
        {
            selectedTopic = await topicByIdResponse.Content.ReadFromJsonAsync<Topic[]>() ?? Array.Empty<Topic>();
        }
    }

    private async Task<HttpResponseMessage> SendAuthorizedRequest(HttpMethod method, string url, HttpContent content = null)
    {
        var request = new HttpRequestMessage(method, url);
        request.Headers.Add("X-API-KEY", "KNOWLEDGESITEAPPAPI");

        if (content != null)
        {
            request.Content = content;
        }

        return await http.SendAsync(request);
    }
}
