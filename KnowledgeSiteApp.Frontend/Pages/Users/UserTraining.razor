@page "/usertraining/{CategoryId:int}"
@inject HttpClient http
@inject IJSRuntime js
@inject NavigationManager navigate
@layout UserCategoriesLayout

<link rel="preconnect" href="https://fonts.googleapis.com" />
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
<link rel="stylesheet" type="text/css" href="css/main.css" />
<link rel="stylesheet" type="text/css" href="css/categories-stylesheet.css" />

<div class="container">
    <h1 style="margin-top: 30px;">Trainings</h1>
    <form class="search-container">
        <input type="text" placeholder="Search" @bind="searchTerm" @bind:event="oninput" />
        <i class="fa fa-search" @onclick="HandleSearch"></i>
    </form>
    <div class="category-container">
        @foreach (Training tr in FilteredTrainings)
        {
            <div class="category-box">
                <button @onclick="() => NavigateToStartTraining(tr.Id)" class="category-content">
                    <h4>@tr.Title</h4>
                </button>
            </div>
        }
    </div>
</div>


@code {
    [Parameter] public int CategoryId { get; set; }
    private Training[] training { get; set; } = Array.Empty<Training>();
    private Training getTraining;
    private string searchTerm = string.Empty;
    private string errorMessage = string.Empty;

    private void NavigateToStartTraining(int trainingId)
    {
        navigate.NavigateTo($"/starttraining/{trainingId}");
    }

    protected override async Task OnParametersSetAsync()
    {
        var response = await SendAuthorizedRequest(HttpMethod.Get, $"https://localhost:7095/api/Training/trainingByCategory?categoryId={CategoryId}");

        if (response.IsSuccessStatusCode)
        {
            training = await response.Content.ReadFromJsonAsync<Training[]>() ?? Array.Empty<Training>();
        }
    }

    private async Task ReloadCategories()
    {
        var response = await SendAuthorizedRequest(HttpMethod.Get, $"https://localhost:7095/api/Training/trainingByCategory?categoryId={CategoryId}");

        if (response.IsSuccessStatusCode)
        {
            training = await response.Content.ReadFromJsonAsync<Training[]>() ?? Array.Empty<Training>();
        }
        StateHasChanged();
    }

    private IEnumerable<Training> FilteredTrainings
            => training.Where(ct => string.IsNullOrEmpty(searchTerm) ||
                ct.Title.Contains(searchTerm, StringComparison.OrdinalIgnoreCase));

    private async Task HandleSearch()
    {
        var response = await SendAuthorizedRequest(HttpMethod.Get, $"https://localhost:7095/api/Training/search?searchTerm={searchTerm}");

        if (response.IsSuccessStatusCode)
        {
            training = await response.Content.ReadFromJsonAsync<Training[]>();
        }

        StateHasChanged();
    }

    private async Task<HttpResponseMessage> SendAuthorizedRequest(HttpMethod method, string url, HttpContent content = null)
    {
        var request = new HttpRequestMessage(method, url);
        request.Headers.Add("X-API-KEY", "KNOWLEDGESITEAPPAPI");

        if (content != null)
        {
            request.Content = content;
        }

        return await http.SendAsync(request);
    }

    public class ValidationErrorResponse
    {
        public Dictionary<string, string[]> Errors { get; set; }
    }
}