@page "/dashboardadmin"
@layout AdminMainLayout
@inject HttpClient http
@inject IJSRuntime js
@inject NavigationManager navigate
@using Blazored.Toast.Configuration
@inject IToastService toastService
@inject AdminService service

<link rel="preconnect" href="https://fonts.googleapis.com" />
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
<link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@300;400;500;600;700&display=swap" rel="stylesheet" />
<link href="css/main.css" rel="stylesheet" />
<link href="css/dashboard-stylesheet.css" rel="stylesheet" />
<script language="javascript" type="text/javascript" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.min.js"></script>

<div class="centered-container">
    <div>
        <h1>
            Hello, Admin!
        </h1>
    </div>
    <div class="container">
        <div class="item container-inside" style="background-color: #efebe0">
            <div class="item-inside">
            <h2
                style="
                padding-top: 50%;
                padding-bottom: auto;
                font-weight: 700;
                font-size: 10vh;
                text-align: center;
                "
            >
                @TotalTrainings
            </h2>
            <h4>
                Total Trainings
            </h4>
            </div>
        </div>
        <div class="item">
            <div
                class="container-inside"
                style="background-color: #efebe0; margin-bottom: 10px"
            >
            <div class="item-inside">
                <h2 style="font-weight: 700; font-size: 8vh; text-align: center">
                    @TotalCategories
                </h2>
                <h4 style="font-weight: 600; font-size: 2.5vh; text-align: center">
                    Categories
                </h4>
            </div>
            </div>
            <div class="container-inside" style="background-color: #efebe0">
                <div class="item-inside">
                    <h2 style="font-weight: 700; font-size: 8vh; text-align: center">
                      0
                    </h2>
                    <h4 style="font-weight: 600; font-size: 2.5vh; text-align: center">
                        Training Ratings
                    </h4>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private int? AdminId;
    private Training[] countTrainings { get; set; } = Array.Empty<Training>();
    private TrainingCategory[] countCategories { get; set; } = Array.Empty<TrainingCategory>();
    private int TotalTrainings;
    private int TotalCategories;
    private string errorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        if (!await service.IsUserAuthenticatedAsync())
        {
            navigate.NavigateTo("/unauthorized");
        }
        else
        {
            AdminId = await service.GetUserIdAsync() ?? 0;
            await LoadCountTraining();
            await LoadCountCategory();
        }
    }

    private async Task LoadCountTraining()
    {
        var response = await SendAuthorizedRequest(HttpMethod.Get, $"https://localhost:7095/api/Training/trainingByAdminId/{AdminId}");

        if (response.IsSuccessStatusCode)
        {
            countTrainings = await response.Content.ReadFromJsonAsync<Training[]>();

            foreach (var user in countTrainings)
            {
                TotalTrainings++;
            }
        }
        else
        {
            toastService.ShowError($"Failed to load data: {response.ReasonPhrase}");
        }
    }

    private async Task LoadCountCategory()
    {
   
        var response = await SendAuthorizedRequest(HttpMethod.Get, $"https://localhost:7095/api/TrainingCategory/categoryByAdmin/{AdminId}");

        if (response.IsSuccessStatusCode)
        {
            countCategories = await response.Content.ReadFromJsonAsync<TrainingCategory[]>();

            foreach (var user in countCategories)
            {
                TotalCategories++;
            }
        }
        else
        {
            toastService.ShowError($"Failed to load data: {response.ReasonPhrase}");
        }
    }

    private async Task<HttpResponseMessage> SendAuthorizedRequest(HttpMethod method, string url, HttpContent content = null)
    {
        var request = new HttpRequestMessage(method, url);
        request.Headers.Add("X-API-KEY", "KNOWLEDGESITEAPPAPI");

        if (content != null)
        {
            request.Content = content;
        }

        return await http.SendAsync(request);
    }
}
