@page "/categoryMain"
@inject HttpClient http
@inject IJSRuntime js
@inject NavigationManager navigate
@using Blazored.Toast.Configuration
@inject IToastService toastService
@layout AdminMainLayout
@inject AdminService service

<link rel="preconnect" href="https://fonts.googleapis.com" />
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
<link rel="stylesheet" type="text/css" href="css/main.css" />
<link rel="stylesheet" type="text/css" href="css/categories-stylesheet.css" />
<link rel="stylesheet" type="text/css" href="css/components-stylesheet.css" />
<link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@300;400;500;600;700&display=swap" rel="stylesheet" />
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" />
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.min.js"></script>

<BlazoredToasts Position="ToastPosition.BottomRight"
                Timeout="5"
                IconType="IconType.FontAwesome"
                SuccessClass="success-toast-override"
                SuccessIcon="fa fa-thumbs-up"
                ErrorIcon="fa fa-bug" />

<ConfirmDialog @ref="dialog" />

<div class="container">
    <!-- Search Bar -->
    <form class="search-container">
        <input type="text" placeholder="Search" @bind="searchTerm" @bind:event="oninput" />
        <i class="fa fa-search" @onclick="HandleSearch"></i>
    </form>
    <div class="category-container">
        <!-- Add New Category Button -->
        <div class="category-box add-new">
            <span class="add-category-button"
                  data-bs-toggle="modal"
                  data-bs-target="#staticBackdrop"
                  @onclick="() => closeModal = true">
                <i class="fa fa-plus"></i>
                Add New Category
            </span>
        </div>

        <!-- Training Categories -->
        @foreach (TrainingCategory ct in FilteredCategories)
        {
            <div class="category-box">
                <button @onclick="() => EditCategory(ct)" href="#" class="category-content">
                    <h4>@ct.CategoryName</h4>
                </button>
                <div class="dropdown-container">
                    <div class="dropdown" @onclick="() => ToggleDropdown(ct.Id)">
                        <button class="dropdown-toggle dropdown-custom" type="button" data-bs-toggle="dropdown" id="dropdownMenuButton">
                            <Icon Name="IconName.ThreeDots" />
                        </button>
                        <div class="@GetDropdownMenuClass(ct.Id)" aria-labelledby="dropdownMenuButton">
                            <a class="dropdown-item" @onclick="() => EditCategory(ct)" data-bs-toggle="modal" data-bs-target="#staticBackdropEdit">Edit</a>
                            <a @onclick="() => ActivateDeactivateCategory(ct.Id)" class="dropdown-item" style="color: @(ct.IsActive ? "green" : "red")">
                                @if (ct.IsActive)
                                {
                                    <span>Active</span>
                                }
                                else
                                {
                                    <span>Not Active</span>
                                }
                            </a>
                        </div>
                    </div>
                </div>
            </div>
        }

        <!-- Add Category Modal -->
        <div class="modal fade @(closeModal ? "show" : "")"
             id="staticBackdrop"
             style="display: @(closeModal ? "block" : "none");"
             data-bs-backdrop="static"
             data-bs-keyboard="false"
             tabindex="-1">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content">
                    <div class="modal-header">
                        @if (!string.IsNullOrEmpty(errorMessage))
                        {
                            <div class="text-danger">@errorMessage</div>
                        }
                        <h4 class="modal-title fs-5" id="staticBackdropLabel">
                            Add New Category
                        </h4>
                        <button type="button"
                                class="btn-close"
                                data-bs-dismiss="modal"
                                aria-label="Close"
                                @onclick="() => closeModal = false">
                        </button>
                    </div>
                    <div class="modal-body">
                        <input type="text"
                               class="form-control"
                               id="newCategoryInput"
                               @bind="category.CategoryName"
                               placeholder="Enter Category Name" />
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-add" @onclick="HandleAddCategory">Add</button>
                        <button type="button"
                                class="btn btn-secondary"
                                data-bs-dismiss="modal">
                            Close
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Edit Category Modal -->
        <div class="modal fade  @(closeEditModal ? "show" : "")"
             id="staticBackdropEdit"
             style="display: @(closeEditModal ? "block" : "none");"
             data-bs-backdrop="static"
             data-bs-keyboard="false"
             tabindex="-1">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content">
                    <div class="modal-header">
                        @if (!string.IsNullOrEmpty(errorMessage))
                        {
                            <div class="text-danger">@errorMessage</div>
                        }
                        <h4 class="modal-title fs-5" id="staticBackdropLabel">
                            Edit Category
                        </h4>
                        <button type="button"
                                class="btn-close"
                                data-bs-dismiss="modal"
                                aria-label="Close"
                                @onclick="() => closeEditModal = false">
                        </button>
                    </div>
                    <div class="modal-body">
                        <input type="text"
                               class="form-control"
                               id="editCategoryInput"
                               @bind="category.CategoryName"
                               placeholder="Enter Category Name" />
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-add" @onclick="HandleEditCategory">Save</button>
                        <button type="button"
                                class="btn btn-secondary"
                                data-bs-dismiss="modal">
                            Close
                        </button>
                    </div>
                </div>
            </div>
        </div>

    </div>
</div>

@code {
    private int? AdminId;
    private TrainingCategory category = new TrainingCategory();
    private TrainingCategory[] trainingcategory { get; set; } = Array.Empty<TrainingCategory>();
    private Dictionary<int, bool> dropdownStates = new Dictionary<int, bool>();
    private string searchTerm = string.Empty;
    private string errorMessage = string.Empty;
    private ConfirmDialog dialog = default!;
    private bool closeModal = false;
    private bool closeEditModal = false;

    private async Task HandleAddCategory()
    {
        toastService.ClearAll();

        if (category.CategoryName != null)
        {
            var response = await SendAuthorizedRequest(HttpMethod.Post, "https://localhost:7095/api/TrainingCategory/add", JsonContent.Create(category));

            if (response.IsSuccessStatusCode)
            {
                toastService.ShowSuccess("Category created successfully");
                await ReloadCategories();
                closeModal = false;
                await Task.Delay(300);
                RefreshPage();
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.BadRequest)
            {
                toastService.ShowError("Category Name Already Exist!");
            }
            else
            {
                toastService.ShowError("An error occurred while adding the category. Please try again later.");
            }
        }
        else
        {
            toastService.ShowError("Please fill-up the category name field.");
        }
    }

    private async Task HandleEditCategory()
    {
        toastService.ClearAll();

        if (!string.IsNullOrWhiteSpace(category.CategoryName))
        {
            var response = await SendAuthorizedRequest(HttpMethod.Put, $"https://localhost:7095/api/TrainingCategory/update/{category.Id}", JsonContent.Create(category));

            if (response.IsSuccessStatusCode)
            {
                toastService.ShowSuccess("Category edited successfully");
                await ReloadCategories();
                closeEditModal = false;
                await Task.Delay(300);
                RefreshPage();
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.BadRequest)
            {
                toastService.ShowError("Category Name Already Exist!");
            }
            else
            {
                toastService.ShowError("An error occurred while adding the category. Please try again later.");
            }
        }
        else
        {
            toastService.ShowError("Please fill-up the category name field.");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        if (!await service.IsUserAuthenticatedAsync())
        {
            navigate.NavigateTo("/unauthorized");
        }
        else
        {
            AdminId = await service.GetUserIdAsync() ?? 0;
            await LoadCategoryData();
        }
    }

    private async Task LoadCategoryData()
    {
        var response = await SendAuthorizedRequest(HttpMethod.Get, "https://localhost:7095/api/TrainingCategory");

        if (response.IsSuccessStatusCode)
        {
            trainingcategory = await response.Content.ReadFromJsonAsync<TrainingCategory[]>() ?? Array.Empty<TrainingCategory>();
        }

        foreach (var category in trainingcategory)
        {
            dropdownStates[category.Id] = false;
        }
    }

    private async Task ReloadCategories()
    {
        var response = await SendAuthorizedRequest(HttpMethod.Get, "https://localhost:7095/api/TrainingCategory");
        if (response.IsSuccessStatusCode)
        {
            trainingcategory = await response.Content.ReadFromJsonAsync<TrainingCategory[]>() ?? Array.Empty<TrainingCategory>();
        }

        foreach (var category in trainingcategory)
        {
            dropdownStates[category.Id] = false;
        }
        StateHasChanged(); 
    }

    private async Task ActivateDeactivateCategory(int id)
    {
        var categoryStatus = trainingcategory.FirstOrDefault(u => u.Id == id);

        if (categoryStatus == null)
        {
            throw new InvalidOperationException("Training Category not found");
        }

        var title = "Category Status Change";
        var message1 = categoryStatus.IsActive ?
            $"Do you want to deactivate {categoryStatus.CategoryName}?" :
            $"Do you want to activate {categoryStatus.CategoryName}?";

        var options = new ConfirmDialogOptions
        {
            YesButtonText = "OK",
            YesButtonColor = ButtonColor.Success,
            NoButtonText = "CANCEL",
            NoButtonColor = ButtonColor.Danger
        };

        var confirmation = await dialog.ShowAsync(title, message1, options);

        if (confirmation)
        {
            await ToggleCategoryStatus(categoryStatus);
        }
    }

    private async Task ToggleCategoryStatus(TrainingCategory categoryStatus)
    {
        categoryStatus.IsActive = !categoryStatus.IsActive;
        var endpoint = categoryStatus.IsActive ? $"api/TrainingCategory/activate/{categoryStatus.Id}" : $"api/TrainingCategory/deactivate/{categoryStatus.Id}";
        var response = await SendAuthorizedRequest(HttpMethod.Put, $"https://localhost:7095/{endpoint}", null);

        if (response.IsSuccessStatusCode)
        {
            StateHasChanged();
        }
        else
        {
            categoryStatus.IsActive = !categoryStatus.IsActive;
            await js.InvokeVoidAsync("alert", "Failed to update category status.");
        }
    }

    private IEnumerable<TrainingCategory> FilteredCategories 
            => trainingcategory.Where(ct => string.IsNullOrEmpty(searchTerm) || 
                ct.CategoryName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase));

    private async Task HandleSearch()
    {
        var response = await SendAuthorizedRequest(HttpMethod.Get, $"https://localhost:7095/api/TrainingCategory/search?searchTerm={searchTerm}");

        if (response.IsSuccessStatusCode)
        {
            trainingcategory = await response.Content.ReadFromJsonAsync<TrainingCategory[]>();
        }

        foreach (var category in trainingcategory)
        {
            dropdownStates[category.Id] = false;
        }

        StateHasChanged(); 
    }

    private void EditCategory(TrainingCategory selectedCategory)
    {
        category = new TrainingCategory
        {
            Id = selectedCategory.Id,
            CategoryName = selectedCategory.CategoryName
        };
    }

    private void ToggleDropdown(int categoryId)
    {
        if (dropdownStates.ContainsKey(categoryId))
        {
            dropdownStates[categoryId] = !dropdownStates[categoryId];
        }
        else
        {
            dropdownStates.Add(categoryId, true);
        }
    }

    private string GetDropdownMenuClass(int categoryId)
    {
        return dropdownStates.TryGetValue(categoryId, out var isOpen) && isOpen ? "dropdown-menu show" : "dropdown-menu";
    }

    private void RefreshPage()
    {
        navigate.NavigateTo(navigate.Uri, forceLoad: true);
    }

    private async Task<HttpResponseMessage> SendAuthorizedRequest(HttpMethod method, string url, HttpContent content = null)
    {
        var request = new HttpRequestMessage(method, url);
        request.Headers.Add("X-API-KEY", "KNOWLEDGESITEAPPAPI");

        if (content != null)
        {
            request.Content = content;
        }

        return await http.SendAsync(request);
    }
}