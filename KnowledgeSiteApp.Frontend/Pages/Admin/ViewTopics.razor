@page "/viewTopics/{TrainingId:int}"
@inject HttpClient http
@inject IJSRuntime js
@inject NavigationManager navigate
@using Blazored.Toast.Configuration
@inject IToastService toastService
@layout AdminMainLayout
@inject AdminService service

<link rel="preconnect" href="https://fonts.googleapis.com" />
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
<link rel="stylesheet" type="text/css" href="css/topics-stylesheet.css" />
<link rel="stylesheet" type="text/css" href="css/components-stylesheet.css" />
<link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@300;400;500;600;700&display=swap" rel="stylesheet" />
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css" />
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.min.js"></script>

<BlazoredToasts Position="ToastPosition.BottomRight"
                Timeout="3"
                IconType="IconType.FontAwesome"
                SuccessClass="success-toast-override"
                SuccessIcon="fa fa-thumbs-up"
                ErrorIcon="fa fa-bug" />

<ConfirmDialog @ref="dialog" />

<div class="container-full"
     style="flex-direction: column; justify-content: flex-start">
    <h3>Topics</h3>
    <table class="table">
        <thead>
            <tr class="header"
                style="text-align: center; border: 3px solid #ffc95f">
                <th scope="col" style="width: 5%"></th>
                <th scope="col" style="width: 75%; text-align: center">Topic</th>
                <th scope="col" style="width: 10%; text-align: right">
                    <button class="icon-click" @onclick="GoToAddTopic">
                        <i class="fa-solid fa-plus"></i>
                        New
                    </button>
                </th>
            </tr>
        </thead>
        <tbody>
            @if (getTopics != null && getTopics.Any())
            {
                @foreach (var topic in getTopics)
                {
                    <tr>
                        <td style="text-align: center"></td>
                        <td>
                            <div>
                                <span class="dropdown" @onclick="() => ToggleDropdown(topic.TopicId)">
                                    <i class="fa-solid fa-caret-right @(dropdownStates.ContainsKey(topic.TopicId) && dropdownStates[topic.TopicId] ? "fa-solid fa-caret-down" : "fa-solid fa-caret-right")"></i>
                                </span>
                                <a class="table-row-click">@topic.Title</a>
                                @if (dropdownStates.ContainsKey(topic.TopicId) && dropdownStates[topic.TopicId])
                                {
                                    <ul class="sub-topics show">
                                        @foreach (var subTopic in topic.SubTopics)
                                        {
                                            if (subTopic != null)
                                            {
                                                <li class="inner-row">
                                                    <a class="table-row-click">@subTopic.Title</a>
                                                    <span class="icons">
                                                        <button class="icon-click" @onclick="() => GoToEditSubTopic(subTopic.Id)">
                                                            <i class="fa-solid fa-pen"></i>
                                                        </button>
                                                        <button class="icon-click" @onclick="() => ActivateDeactivateSubTopic(subTopic.Id)">
                                                            <i class="fa-solid @(subTopic.IsActive ? "fa-toggle-on" : "fa-toggle-off")"></i>
                                                        </button>
                                                    </span>
                                                </li>
                                            }
                                            else
                                            {
                                                <li class="inner-row">
                                                    <span>No sub-topic available</span>
                                                </li>
                                            }
                                        }
                                    </ul>
                                }
                            </div>
                        </td>
                        <td style="text-align: center">
                            <span class="icons">
                                <button class="icon-click" @onclick="() => GoToAddSubTopic(topic.TopicId)">
                                    <i class="fa-solid fa-plus"></i>
                                </button>
                                <button class="icon-click" @onclick="() => GoToEditTopic(topic.TopicId)">
                                    <i class="fa-solid fa-pen"></i>
                                </button>
                                <button class="icon-click" @onclick="() => ActivateDeactivateTopic(topic.TopicId)">
                                    <i class="fa-solid @(topic.IsActive ? "fa-toggle-on" : "fa-toggle-off")"></i>
                                </button>
                            </span>
                        </td>
                    </tr>
                }
            }
            else
            {
                <tr>
                    <td class="text-center" colspan="3">No Topic Found!</td>
                </tr>
            }
        </tbody>
    </table>
</div>

@code {
    [Parameter] 
    public int TrainingId { get; set; }
    private int? AdminId;
    private Dictionary<int, bool> dropdownStates = new Dictionary<int, bool>();
    private Topic[] getTopics { get; set; } = Array.Empty<Topic>();
    private SubTopic[] getSubTopics { get; set; } = Array.Empty<SubTopic>();
    private ConfirmDialog dialog = default!;

    protected override async Task OnInitializedAsync()
    {
        if (!await service.IsUserAuthenticatedAsync())
        {
            navigate.NavigateTo("/unauthorized");
        }
        else
        {
            AdminId = await service.GetUserIdAsync() ?? 0;
            await LoadTopicsData();
        }
    }

    private async Task LoadTopicsData()
    {
        var response = await SendAuthorizedRequest(HttpMethod.Get, $"https://localhost:7095/api/Topic/byTrainingId/{TrainingId}");

        if (response.IsSuccessStatusCode)
        {
            getTopics = await response.Content.ReadFromJsonAsync<Topic[]>() ?? Array.Empty<Topic>();
        }
    }

    private void GoToAddTopic()
    {
        navigate.NavigateTo($"/addTopic/{TrainingId}");
    }

    private void GoToAddSubTopic(int topicId) 
    {
        navigate.NavigateTo($"/addSubTopic/{topicId}");
    }

    private void GoToEditTopic(int topicId)
    {
        navigate.NavigateTo($"/editTopic/{topicId}");
    }

    private void GoToEditSubTopic(int subTopicId)
    {
        navigate.NavigateTo($"/editSubTopic/{subTopicId}");
    }

    private async Task ActivateDeactivateTopic(int id)
    {
        var topicStatus = getTopics.FirstOrDefault(u => u.TopicId == id);

        if (topicStatus == null)
        {
            throw new InvalidOperationException("Topic not found");
        }

        var title = "Topic Status Change";
        var message1 = topicStatus.IsActive
            ? $"Do you want to deactivate {topicStatus.Title}?" 
            : $"Do you want to activate {topicStatus.Title}?";

        var options = new ConfirmDialogOptions
        {
            YesButtonText = "OK",
            YesButtonColor = ButtonColor.Success,
            NoButtonText = "CANCEL",
            NoButtonColor = ButtonColor.Danger
        };

        var confirmation = await dialog.ShowAsync(title, message1, options);

        if (confirmation)
        {
            await ToggleTopicStatus(topicStatus);
        }
    }

    private async Task ToggleTopicStatus(Topic topicToChange)
    {
        topicToChange.IsActive = !topicToChange.IsActive;
        var endpoint = topicToChange.IsActive ? $"api/Topic/activate/{topicToChange.TopicId}" : $"api/Topic/deactivate/{topicToChange.TopicId}";
        var response = await SendAuthorizedRequest(HttpMethod.Put, $"https://localhost:7095/{endpoint}", null);
        if (response.IsSuccessStatusCode)
        {
            toastService.ShowSuccess("Topic successfully changed the status");
            StateHasChanged();
        }
        else
        {
            topicToChange.IsActive = !topicToChange.IsActive;
            toastService.ShowError("Failed to update topic status.");
        }
    }

    private async Task ActivateDeactivateSubTopic(int id)
    {
        var subTopicStatus = getSubTopics.FirstOrDefault(u => u.Id == id);

        if (subTopicStatus == null)
        {
            throw new InvalidOperationException("Sub Topic not found");
        }

        var title = "Sub Topic Status Change";
        var message1 = subTopicStatus.IsActive 
            ? $"Do you want to deactivate {subTopicStatus.Title}?" 
            : $"Do you want to activate {subTopicStatus.Title}?";

        var options = new ConfirmDialogOptions
        {
            YesButtonText = "OK",
            YesButtonColor = ButtonColor.Success,
            NoButtonText = "CANCEL",
            NoButtonColor = ButtonColor.Danger
        };

        var confirmation = await dialog.ShowAsync(title, message1, options);

        if (confirmation)
        {
            await ToggleSubTopicStatus(subTopicStatus);
        }
    }

    private async Task ToggleSubTopicStatus(SubTopic subTopicToChange)
    {
        subTopicToChange.IsActive = !subTopicToChange.IsActive;
        var endpoint = subTopicToChange.IsActive ? $"api/SubTopic/activate/{subTopicToChange.Id}" : $"api/SubTopic/deactivate/{subTopicToChange.Id}";
        var response = await SendAuthorizedRequest(HttpMethod.Put, $"https://localhost:7095/{endpoint}", null);
        if (response.IsSuccessStatusCode)
        {
            toastService.ShowSuccess("Sub Topic successfully changed the status");
            StateHasChanged();
        }
        else
        {
            subTopicToChange.IsActive = !subTopicToChange.IsActive;
            toastService.ShowError("Failed to update sub topic status.");
        }
    }

    private void ToggleDropdown(int dropdownId)
    {
        if (dropdownStates.ContainsKey(dropdownId))
        {
            dropdownStates[dropdownId] = !dropdownStates[dropdownId];
        }
        else
        {
            dropdownStates.Add(dropdownId, true);
        }

        StateHasChanged();
    }

    private async Task<HttpResponseMessage> SendAuthorizedRequest(HttpMethod method, string url, HttpContent content = null)
    {
        var request = new HttpRequestMessage(method, url);
        request.Headers.Add("X-API-KEY", "KNOWLEDGESITEAPPAPI");

        if (content != null)
        {
            request.Content = content;
        }

        return await http.SendAsync(request);
    }

}
