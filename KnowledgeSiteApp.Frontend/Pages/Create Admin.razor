@page "/createadmin"
@inject HttpClient http
@inject IJSRuntime js
@inject NavigationManager navigate
@inherits CreateAdminLayout

<h3>Create Admin</h3>

@if (!String.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger" role="alert">
        @errorMessage
    </div>
}

<EditForm Model="@newUser" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="username">Username</label>
        <InputText id="username" class="form-control" @bind-Value="newUser.Username" />
    </div>
    <div class="form-group">
        <label for="firstName">First Name</label>
        <InputText id="firstName" class="form-control" @bind-Value="newUser.FirstName" />
    </div>
    <div class="form-group">
        <label for="lastName">Last Name</label>
        <InputText id="lastName" class="form-control" @bind-Value="newUser.LastName" />
    </div>
    <div class="form-group">
        <label for="email">Email</label>
        <InputText id="email" class="form-control" @bind-Value="newUser.Email" />
    </div>
    <div class="form-group">
        <label for="password">Password</label>
        <InputText id="password" class="form-control" type="password" @bind-Value="newUser.Password" />
    </div>
    @*<div class="form-group">
        <label for="password">Password</label>
        <InputFile id="password" class="form-control" type="password" @bind-Value="newUser.ProfileImage" />
    </div>
    <div class="form-group">
        <label for="password">Password</label>
        <InputFile id="password" class="form-control" type="password" @bind-Value="newUser.BooksImages" />
    </div>*@

    <button type="submit" class="btn btn-primary">Register</button>
</EditForm>

@code {
    private RegisterUserDto newUser = new RegisterUserDto();
    private string errorMessage;

    private async Task HandleValidSubmit()
    {
        var response = await http.PostAsJsonAsync("https://localhost:7095/api/User/add", newUser);

        if (response.IsSuccessStatusCode)
        {
            await js.InvokeVoidAsync("alert", "Admin created successfully");
            navigate.NavigateTo("/index");
        }
        else
        {
            var errorResponse = await response.Content.ReadFromJsonAsync<ValidationErrorResponse>();
            errorMessage = String.Join(" ", errorResponse?.Errors.SelectMany(err => err.Value));
        }
    }

    public class ValidationErrorResponse
    {
        public Dictionary<string, string[]> Errors { get; set; }
    }
}