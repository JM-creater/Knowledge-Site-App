@page "/viewAdmin"
@inject HttpClient http
@inject IJSRuntime js
@inject NavigationManager navigate
@using Blazored.Toast.Configuration
@inject IToastService toastService
@layout SuperAdminMainLayout
@inject AdminService service

<link rel="icon" type="image/x-icon" href="origami_bold_ico.ico" />
<link rel="preconnect" href="https://fonts.googleapis.com" />
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
<link href="css/main.css" rel="stylesheet" />
<link href="css/users-stylesheet.css" rel="stylesheet" />
<link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@300;400;500;600;700&display=swap" rel="stylesheet" />
<link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200" />
<script language="javascript" type="text/javascript" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.min.js"></script>

<style>
    .primary-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        margin: 32px;
    }

    .container-actions {
        display: flex;
        justify-content: space-between;
        align-items: center;
        width: 100%;
        margin-bottom: 20px;
    }

    .search-container {
        font-family: inherit;
        font-weight: 500;
        display: flex;
        align-items: center;
        border-style: solid;
        border-width: 3px;
        border-color: #ffc95f;
        border-radius: 5px;
        margin-right: 5vh;
    }

    .primary-button {
        border-style: solid;
        border-width: 3px;
        border-color: #ffc95f;
        border-radius: 5px;
        margin-left: 5vh;
        margin-right: 10px;
    }

    .table-container {
        width: 100%;
    }

    .table {
        width: 100%;
    }

</style>

<BlazoredToasts Position="ToastPosition.BottomRight"
                Timeout="3"
                IconType="IconType.FontAwesome"
                SuccessClass="success-toast-override"
                SuccessIcon="fa fa-thumbs-up"
                ErrorIcon="fa fa-bug" />

<ConfirmDialog @ref="dialog" />

<div class="primary-container">
    <div class="container-actions">
        <span class="search-container">
            <input type="text" placeholder="Search" @bind="searchTerm" @bind:event="oninput" />
            <i class="fa fa-search" @onclick="HandleSearch"></i>
        </span>
    </div>
    <div class="table-container">
        <table class="table">
            <thead class="thead-dark">
                <tr class="header">
                    <th scope="col">Name</th>
                    <th scope="col">Username</th>
                    <th scope="col">Action</th>
                </tr>
            </thead>
            <tbody>
                @foreach (User userItem in FilteredUser)
                {
                    <tr>
                        <td>@userItem.FirstName @userItem.LastName</td>
                        <td>@userItem.Username</td>
                        <td>
                            <button class="clickable-action">
                                <a class="fas fa-edit" href="editadmin/@userItem.Id">Edit</a>
                            </button>
                            <button @onclick="() => ActivateDeactivateUser(userItem.Id)" class="clickable-action">
                                @if (userItem.IsActive)
                                {
                                    <Icon Name="IconName.Toggle2On" Color="IconColor.Success" />
                                }
                                else
                                {
                                    <Icon Name="IconName.Toggle2Off" Color="IconColor.Danger" />
                                }
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>


@code {
    private int? AdminId;
    private User[] user { get; set; } = Array.Empty<User>();
    private string searchTerm = string.Empty;
    private ConfirmDialog dialog = default!;

    protected override async Task OnInitializedAsync()
    {
        if (!await service.IsUserAuthenticatedAsync())
        {
            navigate.NavigateTo("/unauthorized");
        }
        else
        {
            AdminId = await service.GetUserIdAsync() ?? 0;
            await LoadViewAdminData();
        }
    }

    private async Task LoadViewAdminData()
    {
        var response = await SendAuthorizedRequest(HttpMethod.Get, "https://localhost:7095/api/User/getAllAdmins");

        if (response.IsSuccessStatusCode)
        {
            user = await response.Content.ReadFromJsonAsync<User[]>() ?? Array.Empty<User>();
        }
    }

    private void NavigateToCreateAdmin()
    {
        navigate.NavigateTo("/createadmin");
    }

    private async Task ActivateDeactivateUser(int id)
    {
        var userToChange = user.FirstOrDefault(u => u.Id == id);
        if (userToChange == null)
        {
            throw new InvalidOperationException("User not found");
        }

        var title = "User Status Change";
        var message1 = userToChange.IsActive
            ? $"Do you want to deactivate {userToChange.FirstName} {userToChange.LastName}?"
            : $"Do you want to activate {userToChange.FirstName} {userToChange.LastName}?";

        var options = new ConfirmDialogOptions
        {
            YesButtonText = "OK",
            YesButtonColor = ButtonColor.Success,
            NoButtonText = "CANCEL",
            NoButtonColor = ButtonColor.Danger
        };

        var confirmation = await dialog.ShowAsync(title, message1, options);

        if (confirmation)
        {
            await ToggleUserStatus(userToChange);
        }
    }

    private async Task ToggleUserStatus(User userToChange)
    {
        userToChange.IsActive = !userToChange.IsActive;
        var endpoint = userToChange.IsActive ? $"api/User/activate/{userToChange.Id}" : $"api/User/deactivate/{userToChange.Id}";
        var response = await SendAuthorizedRequest(HttpMethod.Put, $"https://localhost:7095/{endpoint}", null);

        if (response.IsSuccessStatusCode)
        {
            toastService.ShowSuccess("Admin successfully changed the status");
            StateHasChanged();
        }
        else
        {
            userToChange.IsActive = !userToChange.IsActive;
            toastService.ShowError("Failed to update admin status.");
        }
    }

    private IEnumerable<User> FilteredUser
        => user.Where(u => string.IsNullOrEmpty(searchTerm) ||
            u.FirstName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
            u.LastName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
            u.Username.Contains(searchTerm, StringComparison.OrdinalIgnoreCase));

    private async Task HandleSearch()
    {
        var response = await SendAuthorizedRequest(HttpMethod.Get, $"https://localhost:7095/api/User/search?search={searchTerm}");

        if (response.IsSuccessStatusCode)
        {
            user = await response.Content.ReadFromJsonAsync<User[]>();
        }

        StateHasChanged();
    }

    private async Task<HttpResponseMessage> SendAuthorizedRequest(HttpMethod method, string url, HttpContent content = null)
    {
        var request = new HttpRequestMessage(method, url);
        request.Headers.Add("X-API-KEY", "KNOWLEDGESITEAPPAPI");

        if (content != null)
        {
            request.Content = content;
        }

        return await http.SendAsync(request);
    }

}