@page "/viewAdmin"
@inject HttpClient http
@inject IJSRuntime js
@inject NavigationManager navigate
@using Blazored.Toast.Configuration
@inject IToastService toastService
@layout SuperAdminMainLayout
@inject AdminService service

<link rel="icon" type="image/x-icon" href="origami_bold_ico.ico" />
<link rel="preconnect" href="https://fonts.googleapis.com" />
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
<link rel="stylesheet" type="text/css" href="styles/main.css" />
<link rel="stylesheet" type="text/css" href="styles/users-stylesheet.css" />
<link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@300;400;500;600;700&display=swap" rel="stylesheet" />
<link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200" />
<script language="javascript" type="text/javascript" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.min.js"></script>

<style>
    .primary-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        margin: 32px; /* Add margin to the primary container */
    }

    .container-actions {
        display: flex;
        justify-content: space-between;
        align-items: center;
        width: 100%;
        margin-bottom: 20px; /* Add margin at the bottom of the container actions */
    }

    .search-container {
        font-family: inherit;
        font-weight: 500;
        display: flex;
        align-items: center;
        border-style: solid;
        border-width: 3px;
        border-color: #ffc95f;
        border-radius: 5px;
        margin-right: 5vh;
    }

    .primary-button {
        border-style: solid;
        border-width: 3px;
        border-color: #ffc95f;
        border-radius: 5px;
        margin-left: 5vh;
        margin-right: 10px;
    }

    .table-container {
        width: 100%;
    }

    .table {
        width: 100%;
    }

    /* Adjust other styles as needed */
</style>

<BlazoredToasts Position="ToastPosition.BottomRight"
                Timeout="3"
                IconType="IconType.FontAwesome"
                SuccessClass="success-toast-override"
                SuccessIcon="fa fa-thumbs-up"
                ErrorIcon="fa fa-bug" />

<ConfirmDialog @ref="dialog" />

<div class="primary-container">
      <div class="container-actions">
        <button class="primary-button" onclick="createAccount()">
          <span style="font-weight: 700; color: #862b0d">Add New Admin +</span>
        </button>
        <span class="search-container">
          <input type="text" placeholder="Search" />
          <i class="fa fa-search"></i>
        </span>
      </div>
      <div class="table-container">
        <table class="table">
          <thead class="thead-dark">
            <tr class="header">
              <th scope="col">Name</th>
              <th scope="col">Username</th>
              <th scope="col">Action</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td>
                <span class="material-symbols-outlined"> person </span>Estelle
                Marie Pepino
              </td>
              <td>alex@learnest.com</td>
              <td>
                <button class="clickable-action" onclick="{editAccount()}">
                  <span class="material-symbols-outlined"> edit </span>
                </button>
                <button class="clickable-action" onclick="{deleteAccount()}">
                  <span class="material-symbols-outlined"> delete </span>
                </button>
              </td>
            </tr>
            <tr>
              <td>
                <span class="material-symbols-outlined"> person </span>Angeli
                Mhiriel Severo
              </td>
              <td>angeli@learnest.com</td>
              <td>
                <button class="clickable-action" onclick="{editAccount()}">
                  <span class="material-symbols-outlined"> edit </span>
                </button>
                <button class="clickable-action" onclick="{deleteAccount()}">
                  <span class="material-symbols-outlined"> delete </span>
                </button>
              </td>
            </tr>
          </tbody>
        </table>
      </div>
    <div
      class="container-full"
      style="flex-direction: column; justify-content: flex-start"
    >
      <form class="search-container" style="margin: 0">
        <input type="text" placeholder="Search" />
        <i class="fa fa-search"></i>
      </form>
      <table class="table">
        <thead>
          <tr
            class="header"
            style="text-align: center; border: 3px solid #ffc95f"
          >
            <th scope="col" style="width: 10%"></th>
            <th scope="col" style="width: 40%; text-align: center">Name</th>
            <th scope="col" style="width: 40%; text-align: center">Username</th>
            <th scope="col" style="width: 10%; text-align: right">
              <button class="icon-click">
                <i class="fa-solid fa-plus"></i>
                New
              </button>
            </th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td style="text-align: center">
              <img
                src="https://www.bollywoodshaadis.com/img/article-20231131716324259562000.jpg"
                style="
                  max-width: 1.5em;
                  max-height: 1.5em;
                  object-fit: cover;
                  aspect-ratio: 1/1;
                  border-radius: 50%;
                "
              />
            </td>
            <td style="text-align: center">Jennie Kim</td>
            <td style="text-align: center">jenniekim</td>
            <td style="text-align: center">
              <span class="icons"
                ><button class="icon-click">
                  <i class="fa-solid fa-pen"></i></button
                ><button class="icon-click">
                  <i class="fa-solid fa-trash"></i></button
              ></span>
            </td>
          </tr>
          <tr>
            <td style="text-align: center">
              <img
                src="https://pm1.aminoapps.com/6943/5f1eca01c922770baf1e97d452c059254c09159er1-1080-1080v2_hq.jpg"
                style="
                  max-width: 1.5em;
                  max-height: 1.5em;
                  object-fit: cover;
                  aspect-ratio: 1/1;
                  border-radius: 50%;
                "
              />
            </td>
            <td style="text-align: center">Kang Seulgi</td>
            <td style="text-align: center">kseulgi</td>
            <td style="text-align: center">
              <span class="icons"
                ><button class="icon-click">
                  <i class="fa-solid fa-pen"></i></button
                ><button class="icon-click">
                  <i class="fa-solid fa-trash"></i></button
              ></span>
            </td>
          </tr>
        </tbody>
      </table>
    </div>
</div>
    <script
      language="javascript"
      type="text/javascript"
      src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.min.js"
    ></script>

@code {
     
    private int? AdminId;
    private User[] user { get; set; } = Array.Empty<User>();
    private string searchTerm = string.Empty;
    private ConfirmDialog dialog = default!;

    protected override async Task OnInitializedAsync()
    {
        if (!await service.IsUserAuthenticatedAsync())
        {
            navigate.NavigateTo("/unauthorized");
        }
        else
        {
            AdminId = await service.GetUserIdAsync() ?? 0;
            await LoadViewAdminData();
        }
    }

    private async Task LoadViewAdminData()
    {
        var response = await SendAuthorizedRequest(HttpMethod.Get, "https://localhost:7095/api/User/getAllAdmins");

        if (response.IsSuccessStatusCode)
        {
            user = await response.Content.ReadFromJsonAsync<User[]>() ?? Array.Empty<User>();
        }
    }

    private void NavigateToCreateAdmin()
    {
        navigate.NavigateTo("/createadmin");
    }

    private async Task ActivateDeactivateUser(int id)
    {
        var userToChange = user.FirstOrDefault(u => u.Id == id);
        if (userToChange == null)
        {
            throw new InvalidOperationException("User not found");
        }

        var title = "User Status Change";
        var message1 = userToChange.IsActive
            ? $"Do you want to deactivate {userToChange.FirstName} {userToChange.LastName}?"
            : $"Do you want to activate {userToChange.FirstName} {userToChange.LastName}?";

        var options = new ConfirmDialogOptions
        {
            YesButtonText = "OK",
            YesButtonColor = ButtonColor.Success,
            NoButtonText = "CANCEL",
            NoButtonColor = ButtonColor.Danger
        };

        var confirmation = await dialog.ShowAsync(title, message1, options);

        if (confirmation)
        {
            await ToggleUserStatus(userToChange);
        }
    }

    private async Task ToggleUserStatus(User userToChange)
    {
        userToChange.IsActive = !userToChange.IsActive;
        var endpoint = userToChange.IsActive ? $"api/User/activate/{userToChange.Id}" : $"api/User/deactivate/{userToChange.Id}";
        var response = await SendAuthorizedRequest(HttpMethod.Put, $"https://localhost:7095/{endpoint}", null);

        if (response.IsSuccessStatusCode)
        {
            toastService.ShowSuccess("Admin successfully changed the status");
            StateHasChanged();
        }
        else
        {
            userToChange.IsActive = !userToChange.IsActive;
            toastService.ShowError("Failed to update admin status.");
        }
    }

    private IEnumerable<User> FilteredUser
        => user.Where(u => string.IsNullOrEmpty(searchTerm) ||
            u.FirstName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
            u.LastName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
            u.Username.Contains(searchTerm, StringComparison.OrdinalIgnoreCase));

    private async Task HandleSearch()
    {
        var response = await SendAuthorizedRequest(HttpMethod.Get, $"https://localhost:7095/api/User/search?search={searchTerm}");

        if (response.IsSuccessStatusCode)
        {
            user = await response.Content.ReadFromJsonAsync<User[]>();
        }

        StateHasChanged();
    }

    private async Task<HttpResponseMessage> SendAuthorizedRequest(HttpMethod method, string url, HttpContent content = null)
    {
        var request = new HttpRequestMessage(method, url);
        request.Headers.Add("X-API-KEY", "KNOWLEDGESITEAPPAPI");

        if (content != null)
        {
            request.Content = content;
        }

        return await http.SendAsync(request);
    }
}