@page "/editadmin/{id:int}"
@inject HttpClient http
@inject IJSRuntime js
@inject NavigationManager navigate
@inherits EditAdminLayout

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <title>Edit User</title>
    <link
      rel="icon"
      type="image/x-icon"
      href="origami_bold_ico.ico"
    />
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      rel="stylesheet"
      type="text/css"
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css"
    />
    <link
      href="https://fonts.googleapis.com/css2?family=Montserrat:wght@300;400;500;600;700&display=swap"
      rel="stylesheet"
    />
    <link rel="stylesheet" type="text/css" href="css/main.css" />
    <link
      rel="stylesheet"
      type="text/css"
      href="css/common-forms-stylesheet.css"
    />
    <link rel="stylesheet"
          type="text/css"
          href="css/EditAdmin.css" />
    <script
      language="javascript"
      type="text/javascript"
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.min.js"
    ></script>
    <!--
        This style definition will override the existing 
        definitions for centered container.
    -->
  </head>
  <body>
    <div class="centered-container">
      <form class="login-form">
        <!--
          Header
        -->
        <div class="header" style="padding-top: 20px">
          <table align="center">
            <tr>
              <td>
                <img
                  src="origami bold.png"
                  class="change_password_logo_image"
                />
              </td>
              <td>
                <p class="content-title content-no-margin">LearnNest</p>
                <p class="content-subtitle">Edit Admin Account</p>
              </td>
            </tr>
          </table>
        </div>

        <!--
          Username.
        -->
        <div class="form-group form-group-element">
          @* <input
            type="text"
            class="form-control"
            id="username"
            aria-describedby="username"
            placeholder="Edit Username"
          /> *@
                <input id="username" class="form-control" @bind="editUser.Username" aria-describedby="username"
                           placeholder="Edit Username" />
        </div>

        <!--
          Fullname.
        -->
        <div class="form-group form-group-element">
         @*  <input
            type="text"
            class="form-control"
            id="fullname"
            aria-describedby="username"
            placeholder="Edit Fullname"
          /> *@
                <input id="firstName" class="form-control" @bind="editUser.FirstName" aria-describedby="username"
                           placeholder="Edit Fullname" />
        </div>

        <!--
          Login button only.
        -->
        <div>
          @* <button
            type="submit"
            class="btn button btn-primary"
            onclick="{
                confirm('Save changes?');
            }
            "
          >
            Confirm Changes
          </button> *@
          <button type="submit" class="btn button btn-primary" onclick="@HandleEditUser">Update</button>
        </div>
        <div>
          <a href="user-management.html" class="content-link-center"
            >Return to Admin User Management Panel</a>
        </div>
      </form>
    </div>
  </body>
</html>


@code {
    [Parameter] public int id { get; set; }
    private User editUser = new User();
    private string errorMessage;

    protected override async Task OnParametersSetAsync()
    {
        var response = await SendAuthorizedRequest(HttpMethod.Get, $"https://localhost:7095/api/User/{id}");

        if (response.IsSuccessStatusCode)
        {
            editUser = await response.Content.ReadFromJsonAsync<User>();
        }
    }

    private async Task HandleEditUser()
    {
        var response = await SendAuthorizedRequest(HttpMethod.Put, $"https://localhost:7095/api/User/updateDetails/{id}", JsonContent.Create(editUser));

        if (response.IsSuccessStatusCode)
        {
            var updatedUser = await response.Content.ReadFromJsonAsync<User>();
            editUser = updatedUser;
            await js.InvokeVoidAsync("alert", "Admin updated successfully");
            navigate.NavigateTo("/index");
        }
        else
        {
            var errorResponse = await response.Content.ReadFromJsonAsync<ValidationErrorResponse>();
            errorMessage = String.Join(" ", errorResponse?.Errors.SelectMany(err => err.Value));
        }
    }

    private async Task<HttpResponseMessage> SendAuthorizedRequest(HttpMethod method, string url, HttpContent content = null)
    {
        var request = new HttpRequestMessage(method, url);
        request.Headers.Add("X-API-KEY", "KNOWLEDGESITEAPPAPI");

        if (content != null)
        {
            request.Content = content;
        }

        return await http.SendAsync(request);
    }

    public class ValidationErrorResponse
    {
        public Dictionary<string, string[]> Errors { get; set; }
    }
}
