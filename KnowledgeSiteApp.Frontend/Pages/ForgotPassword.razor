@page "/forgotPassword"
@inject HttpClient http
@inject IJSRuntime js
@inject NavigationManager navigate
@using Blazored.Toast.Configuration
@inject IToastService toastService
@layout LoginLayout
@inject AdminService service

<link href="css/login-stylesheet.css" rel="stylesheet" />
<link href="css/main.css" rel="stylesheet" />
<link rel="icon" type="image/x-icon" href="/origami_bold_ico.ico" />
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.1.1/css/all.min.css">

<BlazoredToasts Position="ToastPosition.BottomRight"
                Timeout="5"
                IconType="IconType.FontAwesome"
                SuccessClass="success-toast-override"
                SuccessIcon="fa fa-thumbs-up"
                ErrorIcon="fa fa-bug" />

<div class="centered-container">
    <EditForm class="login-form" Model="@resetPasswordDto" OnValidSubmit="HandleResetPassword">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="header">
            <img src="/origami bold.png" class="login_logo_image" />
            <p class="content-title content-no-margin">LearnNest</p>
            <p class="content-subtitle">Reset Password</p>
        </div>

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger" role="alert" style="text-align: center;">
                @errorMessage
            </div>
        }

        <div class="form-group form-group-element">
            <InputText type="password" class="form-control" id="password" placeholder="Password" @bind-Value="resetPasswordDto.NewPassword" />
        </div>

        <div>
            <button type="submit" class="btn button btn-primary">Confirm</button>
        </div>
    </EditForm>
</div>

@code {
    [Parameter] public string Token { get; set; }

    private PasswordResetDto resetPasswordDto = new PasswordResetDto();
    private string errorMessage = string.Empty;

    protected override void OnInitialized()
    {
        resetPasswordDto.Token = Token;
    }

    private async Task HandleResetPassword()
    {
        try
        {
            toastService.ClearAll();

            if (resetPasswordDto.NewPassword != null)
            {
                resetPasswordDto.Token = Token;

                var response = await http.PostAsJsonAsync("https://localhost:7095/api/User/reset-password", resetPasswordDto);

                if (response.IsSuccessStatusCode)
                {
                    toastService.ShowSuccess("You have successfully reset the password");
                    await Task.Delay(3000);
                    navigate.NavigateTo("/");
                }
                else
                {
                    var errorResponse = await response.Content.ReadAsStringAsync();
                    toastService.ShowError($"Failed to reset password: {errorResponse}");
                }
            }
            else
            {
                toastService.ShowSuccess("Please input the field.");
            }
        }
        catch (Exception e)
        {
            toastService.ShowError($"An error occurred: {e.Message}");
        }
    }
}
