@page "/"
@inject HttpClient http
@inject IJSRuntime js
@inject NavigationManager navigate
@layout LoginLayout
@inject AdminService service

<link href="css/login-stylesheet.css" rel="stylesheet" />
<link href="css/main.css" rel="stylesheet" />
<link rel="icon" type="image/x-icon" href="/origami_bold_ico.ico" />
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.1.1/css/all.min.css">

<div class="centered-container">
    <EditForm class="login-form" Model="@loginUser" OnValidSubmit="HandleLoginSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="header">
            <img src="/origami bold.png" class="login_logo_image" />
            <p class="content-title content-no-margin">LearnNest</p>
            <p class="content-subtitle">Admin Control Panel</p>
        </div>

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger" role="alert" style="text-align: center;">
                @errorMessage
            </div>
        }

        <div class="form-group form-group-element">
            <InputText class="form-control" id="email" aria-describedby="emailHelp" placeholder="Username or Email" @bind-Value="loginUser.UsernameOrEmail" />
        </div>

        <div class="form-group form-group-element">
            <InputText type="password" class="form-control" id="password" placeholder="Password" @bind-Value="loginUser.Password" />
            <a class="content-link-right" style="cursor: pointer; text-decoration: none;">Forgotten Password?</a>
        </div>

        <div>
            <button type="submit" class="btn button btn-primary">Login</button>
            <p class="content-link">No account? Call support to register.</p>
        </div>
    </EditForm>
</div>

@code {
    private LoginUserDto loginUser = new LoginUserDto();
    private string errorMessage = string.Empty;

    private async Task HandleLoginSubmit()
    {
        try
        {
            await service.Login(loginUser);

            if (service.IsAuthenticated)
            {
                await service.SaveUserIdAsync(service.User.Id);

                switch (service.User.Role)
                {
                    case 1: 
                        navigate.NavigateTo("/dashboardadmin");
                        break;
                    case 2:
                        navigate.NavigateTo("/dashboard");
                        break;
                    default:
                        navigate.NavigateTo("/unauthorized");
                        break;
                }
            }
            else
            {
                errorMessage = "Login failed. Please check your credentials.";
            }
        }
        catch (Exception e)
        {
            errorMessage = "An error occurred: " + e.Message;
        }
    }
}