@page "/"
@inject HttpClient http
@inject IJSRuntime js
@inject NavigationManager navigate
@* @layout LoginLayout *@
@* @inject Blazored.SessionStorage.ISessionStorageService sessionStorage *@

<link href="css/login-stylesheet.css" rel="stylesheet" />
<link href="css/main.css" rel="stylesheet" />
<link rel="icon" type="image/x-icon" href="/origami_bold_ico.ico" />
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.1.1/css/all.min.css">

<div class="centered-container">
    <EditForm class="login-form" Model="@loginUser" OnValidSubmit="HandleLoginSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="header">
            <img src="/origami bold.png" class="login_logo_image" />
            <p class="content-title content-no-margin">LearnNest</p>
            <p class="content-subtitle">Admin Control Panel</p>
        </div>

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger" role="alert">
                @errorMessage
            </div>
        }

        <div class="form-group form-group-element">
            <InputText class="form-control" id="email" aria-describedby="emailHelp" placeholder="Username or Email" @bind-Value="loginUser.UsernameOrEmail" />
        </div>

        <div class="form-group form-group-element">
            <InputText type="password" class="form-control" id="password" placeholder="Password" @bind-Value="loginUser.Password" />
            <p class="content-link-right">Forgotten Password?</p>
        </div>

        <div>
            <button type="submit" class="btn button btn-primary">Login</button>
            <p class="content-link">No account? Call support to register.</p>
        </div>
    </EditForm>
</div>


@code {
    private LoginUserDto loginUser = new LoginUserDto();
    private string errorMessage;

    private async Task HandleLoginSubmit()
    {
        var response = await SendAuthorizedRequest(HttpMethod.Post, "https://localhost:7095/api/User/Login", JsonContent.Create(loginUser));

        if (response.IsSuccessStatusCode)
        {
            await js.InvokeVoidAsync("alert", "Successfully Logged In");
            navigate.NavigateTo("/index");
        }
        else
        {
            var errorResponse = await response.Content.ReadFromJsonAsync<ValidationErrorResponse>();
            errorMessage = String.Join(" ", errorResponse?.Errors.SelectMany(err => err.Value));
        }
    }

    private async Task<HttpResponseMessage> SendAuthorizedRequest(HttpMethod method, string url, HttpContent content = null)
    {
        var request = new HttpRequestMessage(method, url);
        request.Headers.Add("X-API-KEY", "KNOWLEDGESITEAPPAPI");

        if (content != null)
        {
            request.Content = content;
        }

        return await http.SendAsync(request);
    }

    public class ValidationErrorResponse
    {
        public Dictionary<string, string[]> Errors { get; set; }
    }
}