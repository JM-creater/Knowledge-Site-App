@page "/"
@inject HttpClient http
@inject IJSRuntime js
@inject NavigationManager navigate
@using Blazored.Toast.Configuration
@inject IToastService toastService
@layout LoginLayout
@inject AdminService service

<link href="css/login-stylesheet.css" rel="stylesheet" />
<link href="css/main.css" rel="stylesheet" />
<link rel="icon" type="image/x-icon" href="/origami_bold_ico.ico" />
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.1.1/css/all.min.css">

<BlazoredToasts Position="ToastPosition.BottomRight"
                Timeout="5"
                IconType="IconType.FontAwesome"
                SuccessClass="success-toast-override"
                SuccessIcon="fa fa-thumbs-up"
                ErrorIcon="fa fa-bug" />

<ConfirmDialog @ref="dialog" />

@if (showResetPasswordInput)
{
    <div class="centered-container">
        <div class="login-form">
            <div class="header">
                <img src="/origami bold.png" class="login_logo_image" />
                <p class="content-title content-no-margin">LearnNest</p>
                <p class="content-subtitle">Enter your email here</p>
            </div>

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger" role="alert" style="text-align: center;">
                    @errorMessage
                </div>
            }

            <div class="form-group form-group-element">
                <input class="form-control" placeholder="Enter your email" @bind="loginUser.UsernameOrEmail" />
            </div>

            <div>
                <button class="btn button btn-primary" @onclick="TriggerForgotPassword">Send Reset Link</button>
                <p @onclick="GoToLogin" class="content-link">Go back.</p>
            </div>
        </div>
    </div>
}
else
{
    <div class="centered-container">
        <EditForm class="login-form" Model="@loginUser" OnValidSubmit="HandleLoginSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="header">
                <img src="/origami bold.png" class="login_logo_image" />
                <p class="content-title content-no-margin">LearnNest</p>
                <p class="content-subtitle">Admin Control Panel</p>
            </div>

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger" role="alert" style="text-align: center;">
                    @errorMessage
                </div>
            }
            <div class="form-group form-group-element">
                <InputText class="form-control" id="email" aria-describedby="emailHelp" placeholder="Username or Email" @bind-Value="loginUser.UsernameOrEmail" />
            </div>

            <div class="form-group form-group-element">
                <InputText type="password" class="form-control" id="password" placeholder="Password" @bind-Value="loginUser.Password" />
                <a class="content-link-right" style="cursor: pointer; text-decoration: none;" @onclick="ShowResetPasswordInput">Forgotten Password?</a>
            </div>

            <div>
                <button type="submit" class="btn button btn-primary">Login</button>
                <p class="content-link">No account? Call support to register.</p>
            </div>
        </EditForm>
    </div>
}

@code {
    private LoginUserDto loginUser = new LoginUserDto();
    private string errorMessage = string.Empty;
    private ConfirmDialog dialog = default!;
    private bool showResetPasswordInput = false;

    private async Task HandleLoginSubmit()
    {
        try
        {
            await service.Login(loginUser);

            if (service.IsAuthenticated)
            {
                await service.SaveUserIdAsync(service.User.Id);

                switch (service.User.Role)
                {
                    case 1: 
                        navigate.NavigateTo("/dashboardadmin");
                        break;
                    case 2:
                        navigate.NavigateTo("/dashboard");
                        break;
                    default:
                        navigate.NavigateTo("/unauthorized");
                        break;
                }
            }
            else
            {
                errorMessage = "Login failed. Please check your credentials.";
            }
        }
        catch (Exception e)
        {
            errorMessage = "An error occurred: " + e.Message;
        }
    }

    private void GoToLogin()
    {
        navigate.NavigateTo("/");
    }

    private void ShowResetPasswordInput()
    {
        showResetPasswordInput = true;
    }

    private async Task ForgotPassword()
    {
        toastService.ClearAll();

        try
        {
            var content = JsonContent.Create(new { Email = loginUser.UsernameOrEmail });
            var result = await http.PostAsync("https://localhost:7095/api/User/forgot-password", content);

            if (result.IsSuccessStatusCode)
            {
                toastService.ShowSuccess("A password reset link has been sent to your email. Please check your inbox to continue.");
            }
            else if (result.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                toastService.ShowError("Email not registered.");
            }
            else
            {
                var errorResponse = await result.Content.ReadAsStringAsync();
                toastService.ShowError($"Failed to send reset link: {errorResponse}");
            }
        }
        catch (Exception e)
        {
            toastService.ShowError("Error sending reset link: " + e.Message);
        }
    }


    private async Task TriggerForgotPassword()
    {
        var options = new ConfirmDialogOptions
        {
            YesButtonText = "Yes, Send Reset Link",
            YesButtonColor = ButtonColor.Success,
            NoButtonText = "Cancel",
            NoButtonColor = ButtonColor.Danger
        };

        var confirmation = await dialog.ShowAsync(
            title: "Reset Password",
            message1: "Do you want to send a password reset link to your email?",
            confirmDialogOptions: options);

        if (confirmation)
        {
            await ForgotPassword();
        }
    }
}